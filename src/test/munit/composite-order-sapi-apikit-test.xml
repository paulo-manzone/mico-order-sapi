<?xml version="1.0" encoding="UTF-8"?>
<mule
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
	xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd 
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<munit:config name="composite-order-sapi-apikit-test.xml" />
	<http:request-config
		name="HTTP_Request_Configuration"
		basePath="/api/v1">
		<http:request-connection
			host="localhost"
			port="8083"
			connectionIdleTimeout="3000000" />
	</http:request-config>
	<flow name="raise500" doc:id="1089818f-d7d7-4ecc-a1d2-82150d6911b6" >
		<raise-error doc:name="Raise error" doc:id="48031f91-d470-4564-9f15-69dc5cbf32e2" type="APP:INTERNAL_SERVER_ERROR"/>
		<error-handler >
			<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="74aa8790-18f4-455e-a6bc-c16eac1e2e19" type="APP:INTERNAL_SERVER_ERROR" >
				<ee:transform doc:name='Set "errorMessage" and "description" and vars.httpStatus' doc:id="6d3a5170-0f11-4fdd-9b33-a08d1eba89d1" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
    "success": false,
    "apiName": "mico-order-eapi",
    "version": "1.0.11",
    "correlationId": "df9639a0-4eba-11eb-9b11-0005166836eb",
    "timestamp": "2021-01-04T15:30:09.966-03:00",
    "errorDetails": [
        {
            "code": 500,
            "message": "HTTP POST on resource 'http://localhost:8081/api/v1/orders' failed: internal server error (500).",
            "additionalInfo": "Internal Server Error : HTTP POST on resource 'http://localhost:8081/api/v1/orders' failed: internal server error (500)."
        },
        {
            "code": 500,
            "message": "HTTP POST on resource 'http://localhost:8083/api/v1/orders' failed with status code 409.",
            "additionalInfo": "Internal Server Error : HTTP POST on resource 'http://localhost:8083/api/v1/orders' failed with status code 409."
        },
        {
            "code": 500,
            "message": "There is a server issue",
            "additionalInfo": "Internal Server Error : There is a server issue"
        }
    ]
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[500]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</on-error-continue>
		</error-handler>
	</flow>
	<munit:test
		name="get:\alive:mico-composite-order-sapi-config-200-application\json-FlowTest"
		description="Verifying functionality of [get:\alive:mico-composite-order-sapi-config-200-application\json]">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-composite-order-sapi-main" />
			<munit:enable-flow-source value="get:\alive:mico-composite-order-sapi-config" />
		</munit:enable-flow-sources>
		<munit:execution>
			<http:request
				config-ref="HTTP_Request_Configuration"
				method="GET"
				path="/alive">
				<http:body><![CDATA[payload]]></http:body>
				<http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(200)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 200" />
			<munit-tools:assert-that
				expression="#[output application/java --- payload]"
				is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/get_200_alive_application_json.json','application/json'))]"
				message="The response payload is not correct!"
				doc:name="Assert That - Payload is Expected" />
		</munit:validation>
	</munit:test>
	<munit:test
		name="post:\orders:application\json:mico-composite-order-sapi-config-201-application\json-FlowTest"
		description="Verifying functionality of [post:\orders:application\json:mico-composite-order-sapi-config-201-application\json]">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-composite-order-sapi-main" />
			<munit:enable-flow-source value="post:\orders:application\json:mico-composite-order-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_orders_application_json.json')]" />
			<munit-tools:mock-when
				doc:name="Mock when"
				doc:id="51e93945-ed9b-444e-87eb-c3505c5825ac"
				processor="salesforce-composite:execute-composite-request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="Execute composite request"
						attributeName="doc:name" />
					<munit-tools:with-attribute
						whereValue="a01d9241-0d56-4b81-b5d2-dfec5dd29aba"
						attributeName="doc:id" />
					<munit-tools:with-attribute
						whereValue="Salesforce_Composite_Config"
						attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[{
	compositeResponse: [
		{
			body: {
				id: 1
			},
			httpStatusCode: 201
		}
	]
}]"
						mediaType="application/java"
						encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request
				config-ref="HTTP_Request_Configuration"
				method="POST"
				path="/orders">
				<http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(201)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 201" />
			<munit-tools:assert-that
				expression="#[output application/java --- payload]"
				is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/post_201_orders_application_json.json', 'application/json'))]"
				message="The response payload is not correct!"
				doc:name="Assert That - Payload is Expected" />
		</munit:validation>
	</munit:test>
	<munit:test
		name="post:\orders:application\json:mico-composite-order-sapi-config-400-application\json-FlowTest"
		description="Verifying functionality of [post:\orders:application\json:mico-composite-order-sapi-config-400-application\json]">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-composite-order-sapi-main" />
			<munit:enable-flow-source value="post:\orders:application\json:mico-composite-order-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior >
			<set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_400_orders.json')]" doc:name="Set Payload" doc:id="dcda6e50-30f1-47ba-aab6-bfeb8b94ae72" />
		</munit:behavior>
		<munit:execution>
			<http:request
				config-ref="HTTP_Request_Configuration"
				method="POST"
				path="/orders">
				<http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
				<http:response-validator>
					<http:success-status-code-validator values="400" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(400)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 400" />
			<munit-tools:assert doc:name="Assert expression" doc:id="c93247f0-d15a-4a00-8e3a-56bd5e9619f4" >
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
payload must [
	$.success must equalTo(false),
	$.errorDetails[0].code must equalTo(400)
]]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="post:\orders:application\json:mico-composite-order-sapi-config-500-application\json-FlowTest"
		description="Verifying functionality of [post:\orders:application\json:mico-composite-order-sapi-config-500-application\json]">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-composite-order-sapi-main" />
			<munit:enable-flow-source value="post:\orders:application\json:mico-composite-order-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_orders_application_json.json')]" />
			<munit-tools:mock-when
				doc:name="Mock when"
				doc:id="475c5c1a-dd40-49b0-93cb-c1bf6457119d"
				processor="salesforce-composite:execute-composite-request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="Execute composite request"
						attributeName="doc:name" />
					<munit-tools:with-attribute
						whereValue="a01d9241-0d56-4b81-b5d2-dfec5dd29aba"
						attributeName="doc:id" />
					<munit-tools:with-attribute
						whereValue="Salesforce_Composite_Config"
						attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APP:SERVER" />
				</munit-tools:then-return>
				<munit-tools:then-call flow="raise500" />
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request
				config-ref="HTTP_Request_Configuration"
				method="POST"
				path="/orders">
				<http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
				<http:response-validator>
					<http:success-status-code-validator values="500" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(500)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 500" />
		</munit:validation>
	</munit:test>
	<munit:test
		name="get:\orders:mico-composite-order-sapi-config-200-application\json-FlowTest"
		description="Verifying functionality of [get:\orders:mico-composite-order-sapi-config-200-application\json]"
		timeOut="100000">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-composite-order-sapi-main" />
			<munit:enable-flow-source value="get:\orders:mico-composite-order-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock when" doc:id="10d5628b-2923-4f45-8226-4b27a2170d7b" processor="salesforce:query">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Query Order" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="50a1300e-d4cb-43a8-bd6b-ebbd4fda748b" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="Salesforce_Config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value=' #[
[{
  PoNumber__c: 123473.0,
  SubTotal__c: 41.5,
  GiftWrapFlag__c: true,
  GiftWrapMessage__c: "You rock!",
  SignatureRequired__c: false,
  ShipInstructions__c: "Dont break it",
  "Id": "a024W00000K1eVzQAJ",
  "type": "Order__c",
  CurrencyCode__c: "USD",
  Customer__c:"a004W00000dY3hrQAC",
  Items__r: [
  	{
    "ItemId__c": 12345.0,
    "Category__c": "T-Shirt",
    "Size__c": "M",
    "Id": 123124.0,
    "type": "Item__c",
    "Quantity__c": 4.0
  }, 
  {
    "ItemId__c": 34567.0,
    "Category__c": "Hoodie",
    Size__c: "M",
    "Id": 45890.0,
    "type": "Item__c",
    "Quantity__c": 2.0
  }
  ]
}]
]' mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request
				config-ref="HTTP_Request_Configuration"
				method="GET"
				path="/orders"
				responseTimeout="100000">
				<http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
				<http:query-params><![CDATA[#[{"finalSubtotal":"0","initialSubtotal":"7000000"}]]]></http:query-params>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(200)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 200" />
			<munit-tools:assert-that
				expression="#[output application/java --- payload]"
				is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/get_200_orders_application_json.json','application/json'))]"
				message="The response payload is not correct!"
				doc:name="Assert That - Payload is Expected" />
		</munit:validation>
	</munit:test>
	<munit:test
		name="get:\orders:mico-composite-order-sapi-config-404-application\json-FlowTest"
		description="Verifying functionality of [get:\orders:mico-composite-order-sapi-config-404-application\json]">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-composite-order-sapi-main" />
			<munit:enable-flow-source value="get:\orders:mico-composite-order-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock when"
				doc:id="4a0bf898-f4ee-4087-9e00-9fa66765e748"
				processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="Query Order"
						attributeName="doc:name" />
					<munit-tools:with-attribute
						whereValue="50a1300e-d4cb-43a8-bd6b-ebbd4fda748b"
						attributeName="doc:id" />
					<munit-tools:with-attribute
						whereValue="Salesforce_Config"
						attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[
[]
]"
						mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request
				config-ref="HTTP_Request_Configuration"
				method="GET"
				path="/orders">
				<http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
				<http:query-params><![CDATA[#[{"finalSubtotal":"0","initialSubtotal":"0"}]]]></http:query-params>
				<http:response-validator>
					<http:success-status-code-validator values="404" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(404)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 404" />
			<munit-tools:assert doc:name="Assert expression" doc:id="dfc2c5e8-3b0d-441b-ae34-d5f13491ee65" >
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
payload must [
	$.success must equalTo(false),
	$.errorDetails[0].code must equalTo('404')
]]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="get:\orders:mico-composite-order-sapi-config-400-application\json-FlowTest"
		description="Verifying functionality of [get:\orders:mico-composite-order-sapi-config-400-application\json]">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-composite-order-sapi-main" />
			<munit:enable-flow-source value="get:\orders:mico-composite-order-sapi-config" />
		</munit:enable-flow-sources>
		<munit:execution>
			<http:request
				config-ref="HTTP_Request_Configuration"
				method="GET"
				path="/orders">
				<http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
				<http:response-validator>
					<http:success-status-code-validator values="400" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(400)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 400" />
			<munit-tools:assert doc:name="Assert expression" doc:id="b8af4c58-11e0-4cf6-9b0a-53d84904a383" >
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
payload must [
	$.success must equalTo(false),
	$.errorDetails[0].code must equalTo(400)
]]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="get:\orders:mico-composite-order-sapi-config-500-application\json-FlowTest"
		description="Verifying functionality of [get:\orders:mico-composite-order-sapi-config-500-application\json]">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-composite-order-sapi-main" />
			<munit:enable-flow-source value="get:\orders:mico-composite-order-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock when"
				doc:id="0033a14e-79d1-44f3-9f49-1450f0595262"
				processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="Query Order"
						attributeName="doc:name" />
					<munit-tools:with-attribute
						whereValue="50a1300e-d4cb-43a8-bd6b-ebbd4fda748b"
						attributeName="doc:id" />
					<munit-tools:with-attribute
						whereValue="Salesforce_Config"
						attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-call flow="raise500" />
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request
				config-ref="HTTP_Request_Configuration"
				method="GET"
				path="/orders">
				<http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
				<http:query-params><![CDATA[#[{"finalSubtotal":1,"initialSubtotal":10000}]]]></http:query-params>
				<http:response-validator>
					<http:success-status-code-validator values="500" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(500)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 500" />
			<munit-tools:assert doc:name="Assert expression" doc:id="7b4357eb-3eac-4004-84c7-a3392748aeb6" >
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
payload must [
	$.success must equalTo(false),
	$.errorDetails[0].code must equalTo(500)
]]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="get:\ready:mico-composite-order-sapi-config-200-application\json-FlowTest"
		description="Verifying functionality of [get:\ready:mico-composite-order-sapi-config-200-application\json]">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-composite-order-sapi-main" />
			<munit:enable-flow-source value="get:\ready:mico-composite-order-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock when"
				doc:id="986d982f-b76f-4360-a98f-1a1f5b06caec"
				processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="Query"
						attributeName="doc:name" />
					<munit-tools:with-attribute
						whereValue="9f63b674-1f4f-44c4-86d4-0871ee7caa03"
						attributeName="doc:id" />
					<munit-tools:with-attribute
						whereValue="Salesforce_Config"
						attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:variables>
						<munit-tools:variable
							key="httpStatus"
							value="#[200]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request
				config-ref="HTTP_Request_Configuration"
				method="GET"
				path="/ready">
				<http:headers>#[{"Accept":"application/json"}]</http:headers>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(200)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 200" />
			<munit-tools:assert-that
				expression="#[output application/java --- payload]"
				is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/get_200_ready_application_json.json','application/json'))]"
				message="The response payload is not correct!"
				doc:name="Assert That - Payload is Expected" />
		</munit:validation>
	</munit:test>
	<munit:test name="get:\orderbyid:mico-composite-order-sapi-config-200-application\json-FlowTest" doc:id="d6903d9b-b1dd-4094-8e31-e2709342c045" >
		<munit:enable-flow-sources >
			<munit:enable-flow-source value="mico-composite-order-sapi-main" />
			<munit:enable-flow-source value="get:\orders\(poNumber):mico-composite-order-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="50b8d7c7-01a1-476e-908d-cd457e77cf76" processor="salesforce:query">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Query Order" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="048e1be5-9028-4343-915b-56b3483f440c" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="Salesforce_Config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value=' #[
[{
  PoNumber__c: 123473.0,
  SubTotal__c: 41.5,
  GiftWrapFlag__c: true,
  GiftWrapMessage__c: "You rock!",
  SignatureRequired__c: false,
  ShipInstructions__c: "Dont break it",
  "Id": "a024W00000K1eVzQAJ",
  "type": "Order__c",
  CurrencyCode__c: "USD",
  Customer__c:"a004W00000dY3hrQAC",
  Items__r: [
  {
    "ItemId__c": 12345.0,
    "Category__c": "T-Shirt",
    "Size__c": "M",
    "Id": 123124.0,
    "type": "Item__c",
    "Quantity__c": 4.0
  }, 
  {
    "ItemId__c": 34567.0,
    "Category__c": "Hoodie",
    Size__c: "M",
    "Id": 45890.0,
    "type": "Item__c",
    "Quantity__c": 2.0
  }
]
}]
]' mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<http:request method="GET" doc:name="Request" doc:id="95bd4ab8-e757-40b2-8c14-207de558e7b2" config-ref="HTTP_Request_Configuration" path="/orders/123" >
				<http:headers ><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
				<http:response-validator >
					<http:success-status-code-validator values="200" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert That Status Code is 200" doc:id="012cdce2-427c-4f63-9a56-f24fbfe34331" message="The HTTP Status code is not correct!" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" />
			<munit-tools:assert-that doc:name="Assert That - Payload is Expected" doc:id="649af73f-35f7-47d0-83b2-d32613db29d4" message="The response payload is not correct!" expression="#[output application/java --- payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/get_200_orders_{salesforceId}_application_json.json','application/json'))]" />
		</munit:validation>
	</munit:test>
	<munit:test name="get:\orderbyid:mico-composite-order-sapi-config-400-application\json-FlowTest" doc:id="71dba18b-a0d7-496e-bae1-4bfd1bb7942f">
		<munit:enable-flow-sources >
			<munit:enable-flow-source value="mico-composite-order-sapi-main" />
			<munit:enable-flow-source value="get:\orders\(poNumber):mico-composite-order-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock when" doc:id="f5ba69f0-68da-431e-ab60-7cc0f5c8f4c5" processor="validation:is-not-empty-collection">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Is not empty collection" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="05e41219-3dbe-4154-9f8d-923c44ce5f39" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="Validation_Config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				
				<munit-tools:then-return >
					<munit-tools:error typeId="APP:BAD_REQUEST" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<http:request method="GET" doc:name="Request" doc:id="e8f7f0fe-bab1-4437-995d-c6b0a3bf6b38" config-ref="HTTP_Request_Configuration" path="/orders/a024W00000KCplcQAD">
				<http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
				<http:response-validator >
					<http:success-status-code-validator values="400" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert That Status Code is 400" doc:id="0a06789e-fdcf-4901-9b0d-eb1fcd5d497d" message="The HTTP Status code is not correct!" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" />
			<munit-tools:assert doc:name="Assert expression" doc:id="86ef4c98-dcd9-4ed5-98c1-7afede349906" >
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
payload must [
	$.success must equalTo(false),
	$.errorDetails[0].code must equalTo(400)
]]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\orderbyid:mico-composite-order-sapi-config-404-application\json-FlowTest" doc:id="93235003-cea5-40c3-944f-c07be317fb8a">
		<munit:enable-flow-sources >
			<munit:enable-flow-source value="mico-composite-order-sapi-main" />
			<munit:enable-flow-source value="get:\orders\(poNumber):mico-composite-order-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="5bf8d86c-c619-4e3e-81b8-667278b0f97d" processor="salesforce:query">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Query Order" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="048e1be5-9028-4343-915b-56b3483f440c" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="Salesforce_Config" attributeName="config-ref" />
				</munit-tools:with-attributes>
			
				<munit-tools:then-return >
					<munit-tools:payload value="#[[]]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<http:request method="GET" doc:name="Request" doc:id="a1a77a0c-06a1-4b25-adee-4cb03c689246" config-ref="HTTP_Request_Configuration" path="/orders/123" >
				<http:headers ><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
				<http:response-validator >
					<http:success-status-code-validator values="404" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert That Status Code is 404" doc:id="3adc8c74-0190-4b40-bf53-7a26685b60fa" message="The HTTP Status code is not correct!" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(404)]" />
			<munit-tools:assert doc:name="Assert expression" doc:id="4f80e948-80e4-4bda-94f9-d342a8d31d5a">
				<munit-tools:that><![CDATA[#[import * from dw::test::Asserts 
 ---
payload must [
	$.success must equalTo(false),
	$.errorDetails[0].code must equalTo('404')
]]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\orderbyid:mico-composite-order-sapi-config-500-application\json-FlowTest" doc:id="71ba64eb-31b1-4176-a8d9-da428bdf51ec">
		<munit:enable-flow-sources >
			<munit:enable-flow-source value="mico-composite-order-sapi-main" />
			<munit:enable-flow-source value="get:\orders\(poNumber):mico-composite-order-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="78b5fb20-dbb9-495a-ad7c-c4bf4e368278" processor="salesforce:query">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Query Order" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="048e1be5-9028-4343-915b-56b3483f440c" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="Salesforce_Config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-call flow="raise500" />
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<http:request method="GET" doc:name="Request" doc:id="04ba3c11-d3d5-4250-ae45-4b7e924d3b65" config-ref="HTTP_Request_Configuration" path="/orders/123" >
				<http:headers ><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
				<http:response-validator >
					<http:success-status-code-validator values="500" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert That Status Code is 500" doc:id="66c27f4b-6c51-48ac-a304-403c0d0d3a52" message="The HTTP Status code is not correct!" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(500)]" />
		</munit:validation>
	</munit:test>
</mule>
